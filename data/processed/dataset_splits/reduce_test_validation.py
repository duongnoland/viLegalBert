import pandas as pd
import os

def reduce_dataset(input_file, output_file):
    """
    R√∫t g·ªçn dataset theo y√™u c·∫ßu:
    - Lo·∫°i b·ªè columns content_length v√† chapter
    - Gi·ªõi h·∫°n text v√† article xu·ªëng c√≤n t·ªëi ƒëa 500 k√Ω t·ª±
    - Gi·ªØ nguy√™n s·ªë samples
    """
    print(f"\n{'='*50}")
    print(f"X·ª≠ l√Ω file: {input_file}")
    print(f"{'='*50}")
    
    # ƒê·ªçc file CSV
    print("ƒêang ƒë·ªçc file...")
    df = pd.read_csv(input_file)
    
    print(f"K√≠ch th∆∞·ªõc ban ƒë·∫ßu: {len(df)} samples")
    print(f"C√°c columns hi·ªán t·∫°i: {list(df.columns)}")
    
    # Lo·∫°i b·ªè columns content_length v√† chapter
    columns_to_drop = ['content_length', 'chapter']
    df = df.drop(columns=columns_to_drop, errors='ignore')
    
    print(f"ƒê√£ lo·∫°i b·ªè columns: {columns_to_drop}")
    print(f"C√°c columns c√≤n l·∫°i: {list(df.columns)}")
    
    # Gi·ªõi h·∫°n text v√† article xu·ªëng c√≤n t·ªëi ƒëa 500 k√Ω t·ª±
    if 'text' in df.columns:
        df['text'] = df['text'].astype(str).str[:500]
        print("ƒê√£ gi·ªõi h·∫°n text xu·ªëng c√≤n t·ªëi ƒëa 500 k√Ω t·ª±")
    
    if 'article' in df.columns:
        df['article'] = df['article'].astype(str).str[:500]
        print("ƒê√£ gi·ªõi h·∫°n article xu·ªëng c√≤n t·ªëi ƒëa 500 k√Ω t·ª±")
    
    # L∆∞u file m·ªõi
    df.to_csv(output_file, index=False)
    print(f"ƒê√£ l∆∞u file m·ªõi: {output_file}")
    
    # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ dataset m·ªõi
    print(f"\nTh√¥ng tin dataset m·ªõi:")
    print(f"- S·ªë samples: {len(df)}")
    print(f"- S·ªë columns: {len(df.columns)}")
    print(f"- Columns: {list(df.columns)}")
    
    # Th·ªëng k√™ v·ªÅ ƒë·ªô d√†i text v√† article
    if 'text' in df.columns:
        print(f"\nTh·ªëng k√™ ƒë·ªô d√†i text:")
        print(f"- Trung b√¨nh: {df['text'].str.len().mean():.1f}")
        print(f"- T·ªëi ƒëa: {df['text'].str.len().max()}")
        print(f"- T·ªëi thi·ªÉu: {df['text'].str.len().min()}")
    
    if 'article' in df.columns:
        print(f"\nTh·ªëng k√™ ƒë·ªô d√†i article:")
        print(f"- Trung b√¨nh: {df['article'].str.len().mean():.1f}")
        print(f"- T·ªëi ƒëa: {df['article'].str.len().max()}")
        print(f"- T·ªëi thi·ªÉu: {df['article'].str.len().min()}")
    
    return df

def main():
    """
    X·ª≠ l√Ω test.csv v√† validation.csv:
    - test.csv -> test_reduced.csv
    - validation.csv -> validation_reduced.csv
    """
    print("ÔøΩÔøΩ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω test.csv v√† validation.csv...")
    
    # ƒê·ªãnh nghƒ©a c√°c files c·∫ßn x·ª≠ l√Ω
    files_to_process = [
        {
            'input': 'test.csv',
            'output': 'test_reduced.csv'
        },
        {
            'input': 'validation.csv',
            'output': 'validation_reduced.csv'
        }
    ]
    
    # X·ª≠ l√Ω t·ª´ng file
    for file_info in files_to_process:
        input_file = file_info['input']
        output_file = file_info['output']
        
        if os.path.exists(input_file):
            try:
                reduce_dataset(input_file, output_file)
            except Exception as e:
                print(f"‚ùå L·ªói khi x·ª≠ l√Ω {input_file}: {str(e)}")
        else:
            print(f"‚ö†Ô∏è  File {input_file} kh√¥ng t·ªìn t·∫°i, b·ªè qua...")
    
    print(f"\n{'='*50}")
    print("‚úÖ Ho√†n th√†nh x·ª≠ l√Ω test.csv v√† validation.csv!")
    print(f"{'='*50}")
    
    # Hi·ªÉn th·ªã t·ªïng k·∫øt
    print("\nüìä T·ªïng k·∫øt:")
    for file_info in files_to_process:
        output_file = file_info['output']
        if os.path.exists(output_file):
            file_size = os.path.getsize(output_file) / (1024 * 1024)  # MB
            print(f"- {output_file}: {file_size:.1f} MB")
        else:
            print(f"- {output_file}: Kh√¥ng t·∫°o ƒë∆∞·ª£c")

if __name__ == "__main__":
    main()
