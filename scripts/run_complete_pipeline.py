#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ Script Ch·∫°y Pipeline Ho√†n Ch·ªânh - viLegalBert
Ch·∫°y to√†n b·ªô pipeline t·ª´ t·∫°o dataset ƒë·∫øn evaluation
"""

import os
import sys
import subprocess
import time
from pathlib import Path
import logging
import argparse

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/complete_pipeline.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class CompletePipelineRunner:
    """Runner cho pipeline ho√†n ch·ªânh"""
    
    def __init__(self, config_path: str = "config/config.yaml"):
        """Kh·ªüi t·∫°o runner"""
        self.config_path = config_path
        self.start_time = None
        self.step_times = {}
        
    def _run_command(self, command: str, description: str) -> bool:
        """Ch·∫°y m·ªôt command v√† log k·∫øt qu·∫£"""
        try:
            logger.info(f"üöÄ {description}")
            logger.info(f"üìù Command: {command}")
            
            start_time = time.time()
            result = subprocess.run(command, shell=True, capture_output=True, text=True)
            end_time = time.time()
            
            step_time = end_time - start_time
            self.step_times[description] = step_time
            
            if result.returncode == 0:
                logger.info(f"‚úÖ {description} ho√†n th√†nh th√†nh c√¥ng ({step_time:.2f}s)")
                if result.stdout:
                    logger.info(f"üì§ Output: {result.stdout.strip()}")
                return True
            else:
                logger.error(f"‚ùå {description} th·∫•t b·∫°i")
                if result.stderr:
                    logger.error(f"üì§ Error: {result.stderr.strip()}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi ch·∫°y {description}: {e}")
            return False
    
    def _check_prerequisites(self) -> bool:
        """Ki·ªÉm tra ƒëi·ªÅu ki·ªán ti√™n quy·∫øt"""
        try:
            logger.info("üîç Ki·ªÉm tra ƒëi·ªÅu ki·ªán ti√™n quy·∫øt...")
            
            # Ki·ªÉm tra file JSON g·ªëc
            json_path = Path("data/raw/vbpl_crawl.json")
            if not json_path.exists():
                logger.error(f"‚ùå Kh√¥ng t√¨m th·∫•y file d·ªØ li·ªáu g·ªëc: {json_path}")
                return False
            
            # Ki·ªÉm tra th∆∞ m·ª•c config
            config_dir = Path("config")
            if not config_dir.exists():
                logger.error(f"‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c config: {config_dir}")
                return False
            
            # Ki·ªÉm tra requirements.txt
            requirements_path = Path("requirements.txt")
            if not requirements_path.exists():
                logger.error(f"‚ùå Kh√¥ng t√¨m th·∫•y requirements.txt: {requirements_path}")
                return False
            
            logger.info("‚úÖ T·∫•t c·∫£ ƒëi·ªÅu ki·ªán ti√™n quy·∫øt ƒë√£ ƒë∆∞·ª£c ƒë√°p ·ª©ng")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi ki·ªÉm tra ƒëi·ªÅu ki·ªán ti√™n quy·∫øt: {e}")
            return False
    
    def _install_dependencies(self) -> bool:
        """C√†i ƒë·∫∑t dependencies"""
        try:
            logger.info("üì¶ C√†i ƒë·∫∑t dependencies...")
            
            command = "pip install -r requirements.txt"
            return self._run_command(command, "C√†i ƒë·∫∑t dependencies")
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi c√†i ƒë·∫∑t dependencies: {e}")
            return False
    
    def _create_dataset(self) -> bool:
        """T·∫°o dataset ph√¢n c·∫•p 2 t·∫ßng"""
        try:
            logger.info("üìä T·∫°o dataset ph√¢n c·∫•p 2 t·∫ßng...")
            
            command = "python src/main.py --mode create_dataset"
            return self._run_command(command, "T·∫°o dataset")
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi t·∫°o dataset: {e}")
            return False
    
    def _train_svm(self) -> bool:
        """Training m√¥ h√¨nh SVM"""
        try:
            logger.info("üèãÔ∏è Training m√¥ h√¨nh SVM...")
            
            command = "python src/main.py --mode train_svm --level both"
            return self._run_command(command, "Training SVM")
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi training SVM: {e}")
            return False
    
    def _train_phobert(self) -> bool:
        """Training m√¥ h√¨nh PhoBERT"""
        try:
            logger.info("üèãÔ∏è Training m√¥ h√¨nh PhoBERT...")
            
            command = "python src/main.py --mode train_phobert --level both"
            return self._run_command(command, "Training PhoBERT")
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi training PhoBERT: {e}")
            return False
    
    def _train_bilstm(self) -> bool:
        """Training m√¥ h√¨nh BiLSTM"""
        try:
            logger.info("üèãÔ∏è Training m√¥ h√¨nh BiLSTM...")
            
            command = "python src/main.py --mode train_bilstm --level both"
            return self._run_command(command, "Training BiLSTM")
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi training BiLSTM: {e}")
            return False
    
    def _train_ensemble(self) -> bool:
        """Training m√¥ h√¨nh Ensemble"""
        try:
            logger.info("üèãÔ∏è Training m√¥ h√¨nh Ensemble...")
            
            command = "python src/main.py --mode train_ensemble --level both"
            return self._run_command(command, "Training Ensemble")
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi training Ensemble: {e}")
            return False
    
    def _evaluate_all_models(self) -> bool:
        """ƒê√°nh gi√° t·∫•t c·∫£ c√°c m√¥ h√¨nh"""
        try:
            logger.info("üìä ƒê√°nh gi√° t·∫•t c·∫£ c√°c m√¥ h√¨nh...")
            
            command = "python src/main.py --mode evaluate_all"
            return self._run_command(command, "Evaluation t·ªïng h·ª£p")
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi evaluation: {e}")
            return False
    
    def _generate_report(self) -> bool:
        """T·∫°o b√°o c√°o t·ªïng h·ª£p"""
        try:
            logger.info("üìã T·∫°o b√°o c√°o t·ªïng h·ª£p...")
            
            # T·∫°o th∆∞ m·ª•c reports
            reports_dir = Path("results/reports")
            reports_dir.mkdir(parents=True, exist_ok=True)
            
            # T·∫°o b√°o c√°o
            timestamp = time.strftime("%Y%m%d_%H%M%S")
            report_path = reports_dir / f"pipeline_report_{timestamp}.md"
            
            with open(report_path, 'w', encoding='utf-8') as f:
                f.write("# üöÄ B√°o C√°o Pipeline Ho√†n Ch·ªânh - viLegalBert\n\n")
                f.write(f"**Th·ªùi gian ch·∫°y:** {time.strftime('%Y-%m-%d %H:%M:%S')}\n\n")
                
                f.write("## üìä T√≥m T·∫Øt K·∫øt Qu·∫£\n\n")
                f.write("| B∆∞·ªõc | Tr·∫°ng th√°i | Th·ªùi gian |\n")
                f.write("|------|------------|-----------|\n")
                
                for step, step_time in self.step_times.items():
                    status = "‚úÖ Th√†nh c√¥ng" if step_time > 0 else "‚ùå Th·∫•t b·∫°i"
                    time_str = f"{step_time:.2f}s" if step_time > 0 else "N/A"
                    f.write(f"| {step} | {status} | {time_str} |\n")
                
                f.write(f"\n**T·ªïng th·ªùi gian:** {time.time() - self.start_time:.2f}s\n")
                
                f.write("\n## üéØ K·∫øt Qu·∫£ Cu·ªëi C√πng\n\n")
                f.write("- Dataset ƒë√£ ƒë∆∞·ª£c t·∫°o v·ªõi 10,000 samples\n")
                f.write("- C√°c m√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c training: SVM, PhoBERT, BiLSTM, Ensemble\n")
                f.write("- Evaluation t·ªïng h·ª£p ƒë√£ ho√†n th√†nh\n")
                f.write("- K·∫øt qu·∫£ ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c `results/`\n")
            
            logger.info(f"‚úÖ B√°o c√°o ƒë√£ ƒë∆∞·ª£c t·∫°o: {report_path}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi t·∫°o b√°o c√°o: {e}")
            return False
    
    def run_pipeline(self, skip_dependencies: bool = False) -> bool:
        """Ch·∫°y to√†n b·ªô pipeline"""
        try:
            self.start_time = time.time()
            logger.info("üöÄ B·∫Øt ƒë·∫ßu ch·∫°y pipeline ho√†n ch·ªânh")
            logger.info("=" * 60)
            
            # Ki·ªÉm tra ƒëi·ªÅu ki·ªán ti√™n quy·∫øt
            if not self._check_prerequisites():
                return False
            
            # C√†i ƒë·∫∑t dependencies (n·∫øu c·∫ßn)
            if not skip_dependencies:
                if not self._install_dependencies():
                    return False
            
            # T·∫°o dataset
            if not self._create_dataset():
                return False
            
            # Training c√°c m√¥ h√¨nh
            if not self._train_svm():
                logger.warning("‚ö†Ô∏è Training SVM th·∫•t b·∫°i, ti·∫øp t·ª•c v·ªõi c√°c m√¥ h√¨nh kh√°c")
            
            if not self._train_phobert():
                logger.warning("‚ö†Ô∏è Training PhoBERT th·∫•t b·∫°i, ti·∫øp t·ª•c v·ªõi c√°c m√¥ h√¨nh kh√°c")
            
            if not self._train_bilstm():
                logger.warning("‚ö†Ô∏è Training BiLSTM th·∫•t b·∫°i, ti·∫øp t·ª•c v·ªõi c√°c m√¥ h√¨nh kh√°c")
            
            # Training ensemble (ch·ªâ khi c√≥ √≠t nh·∫•t 2 m√¥ h√¨nh th√†nh c√¥ng)
            if not self._train_ensemble():
                logger.warning("‚ö†Ô∏è Training Ensemble th·∫•t b·∫°i")
            
            # Evaluation
            if not self._evaluate_all_models():
                logger.warning("‚ö†Ô∏è Evaluation th·∫•t b·∫°i")
            
            # T·∫°o b√°o c√°o
            self._generate_report()
            
            # T√≥m t·∫Øt k·∫øt qu·∫£
            total_time = time.time() - self.start_time
            logger.info("=" * 60)
            logger.info("üéâ PIPELINE HO√ÄN TH√ÄNH!")
            logger.info("=" * 60)
            logger.info(f"‚è±Ô∏è T·ªïng th·ªùi gian: {total_time:.2f}s")
            logger.info(f"üìä S·ªë b∆∞·ªõc ƒë√£ ho√†n th√†nh: {len(self.step_times)}")
            
            for step, step_time in self.step_times.items():
                logger.info(f"  ‚úÖ {step}: {step_time:.2f}s")
            
            logger.info("\nüìÅ K·∫øt qu·∫£ ƒë∆∞·ª£c l∆∞u trong:")
            logger.info("  - data/processed/")
            logger.info("  - models/saved_models/")
            logger.info("  - results/")
            logger.info("  - logs/")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói trong qu√° tr√¨nh ch·∫°y pipeline: {e}")
            return False

def main():
    """H√†m ch√≠nh"""
    parser = argparse.ArgumentParser(
        description="Ch·∫°y pipeline ho√†n ch·ªânh cho viLegalBert"
    )
    
    parser.add_argument(
        '--skip-dependencies',
        action='store_true',
        help='B·ªè qua vi·ªác c√†i ƒë·∫∑t dependencies'
    )
    
    parser.add_argument(
        '--config',
        type=str,
        default='config/config.yaml',
        help='ƒê∆∞·ªùng d·∫´n ƒë·∫øn file config'
    )
    
    args = parser.parse_args()
    
    try:
        # Kh·ªüi t·∫°o runner
        runner = CompletePipelineRunner(args.config)
        
        # Ch·∫°y pipeline
        success = runner.run_pipeline(skip_dependencies=args.skip_dependencies)
        
        if success:
            logger.info("üéâ Pipeline ho√†n th√†nh th√†nh c√¥ng!")
            sys.exit(0)
        else:
            logger.error("‚ùå Pipeline th·∫•t b·∫°i!")
            sys.exit(1)
            
    except Exception as e:
        logger.error(f"‚ùå L·ªói trong qu√° tr√¨nh ch·∫°y pipeline: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 